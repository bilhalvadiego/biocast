# Generated by https://quicktype.io
#
# To change quicktype's target language, run command:
#
#   "Set quicktype target language"

from typing import List, Any, Optional


class EdgeHashtagToContentAdvisory:
    count: int
    edges: List[Any]

    def __init__(self, count: int, edges: List[Any]) -> None:
        self.count = count
        self.edges = edges


class Dimensions:
    height: int
    width: int

    def __init__(self, height: int, width: int) -> None:
        self.height = height
        self.width = width


class Edge:
    count: int

    def __init__(self, count: int) -> None:
        self.count = count


class FluffyNode:
    text: str

    def __init__(self, text: str) -> None:
        self.text = text


class EdgeMediaToCaptionEdge:
    node: FluffyNode

    def __init__(self, node: FluffyNode) -> None:
        self.node = node


class EdgeMediaToCaption:
    edges: List[EdgeMediaToCaptionEdge]

    def __init__(self, edges: List[EdgeMediaToCaptionEdge]) -> None:
        self.edges = edges


class Owner:
    id: str

    def __init__(self, id: str) -> None:
        self.id = id


class ThumbnailResource:
    src: str
    config_width: int
    config_height: int

    def __init__(self, src: str, config_width: int, config_height: int) -> None:
        self.src = src
        self.config_width = config_width
        self.config_height = config_height


class PurpleNode:
    comments_disabled: Optional[bool]
    typename: str
    id: str
    edge_media_to_caption: EdgeMediaToCaption
    shortcode: str
    edge_media_to_comment: Edge
    taken_at_timestamp: int
    dimensions: Dimensions
    display_url: str
    edge_liked_by: Edge
    edge_media_preview_like: Edge
    owner: Owner
    thumbnail_src: str
    thumbnail_resources: List[ThumbnailResource]
    is_video: bool
    accessibility_caption: str

    def __init__(self, comments_disabled: Optional[bool], typename: str, id: str, edge_media_to_caption: EdgeMediaToCaption, shortcode: str, edge_media_to_comment: Edge, taken_at_timestamp: int, dimensions: Dimensions, display_url: str, edge_liked_by: Edge, edge_media_preview_like: Edge, owner: Owner, thumbnail_src: str, thumbnail_resources: List[ThumbnailResource], is_video: bool, accessibility_caption: str) -> None:
        self.comments_disabled = comments_disabled
        self.typename = typename
        self.id = id
        self.edge_media_to_caption = edge_media_to_caption
        self.shortcode = shortcode
        self.edge_media_to_comment = edge_media_to_comment
        self.taken_at_timestamp = taken_at_timestamp
        self.dimensions = dimensions
        self.display_url = display_url
        self.edge_liked_by = edge_liked_by
        self.edge_media_preview_like = edge_media_preview_like
        self.owner = owner
        self.thumbnail_src = thumbnail_src
        self.thumbnail_resources = thumbnail_resources
        self.is_video = is_video
        self.accessibility_caption = accessibility_caption


class EdgeHashtagToMediaEdge:
    node: PurpleNode

    def __init__(self, node: PurpleNode) -> None:
        self.node = node


class PageInfo:
    has_next_page: bool
    end_cursor: str

    def __init__(self, has_next_page: bool, end_cursor: str) -> None:
        self.has_next_page = has_next_page
        self.end_cursor = end_cursor


class EdgeHashtagToMedia:
    count: int
    page_info: PageInfo
    edges: List[EdgeHashtagToMediaEdge]

    def __init__(self, count: int, page_info: PageInfo, edges: List[EdgeHashtagToMediaEdge]) -> None:
        self.count = count
        self.page_info = page_info
        self.edges = edges


class Hashtag:
    id: str
    name: str
    allow_following: bool
    is_following: bool
    is_top_media_only: bool
    profile_pic_url: str
    edge_hashtag_to_media: EdgeHashtagToMedia
    edge_hashtag_to_content_advisory: EdgeHashtagToContentAdvisory

    def __init__(self, id: str, name: str, allow_following: bool, is_following: bool, is_top_media_only: bool, profile_pic_url: str, edge_hashtag_to_media: EdgeHashtagToMedia, edge_hashtag_to_content_advisory: EdgeHashtagToContentAdvisory) -> None:
        self.id = id
        self.name = name
        self.allow_following = allow_following
        self.is_following = is_following
        self.is_top_media_only = is_top_media_only
        self.profile_pic_url = profile_pic_url
        self.edge_hashtag_to_media = edge_hashtag_to_media
        self.edge_hashtag_to_content_advisory = edge_hashtag_to_content_advisory


class Data:
    hashtag: Hashtag

    def __init__(self, hashtag: Hashtag) -> None:
        self.hashtag = hashtag


class Extensions:
    is_final: bool

    def __init__(self, is_final: bool) -> None:
        self.is_final = is_final


class Instmages:
    data: Data
    extensions: Extensions
    status: str

    def __init__(self, data: Data, extensions: Extensions, status: str) -> None:
        self.data = data
        self.extensions = extensions
        self.status = status
